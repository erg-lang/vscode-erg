{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Erg",
	"patterns": [
		{
			"include": "#operator"
		},
		{
			"include": "#array"
		},
		{
			"include": "#string"
		},
		{
			"include": "#parentheses"
		},
		{
			"include": "#bracket"
		},
		{
			"include": "#function_decl"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#number"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#type_decl"
		},
		{
			"include": "#symbol"
		},
		{
			"include": "#raw-symbol"
		},
		{
			"include": "#symbolized-operator"
		},
		{
			"include": "#special-variables-do"
		},
		{
			"include": "#procedural"
		},
		{
			"include": "#builtin-functions"
		},
		{
			"include": "#builtin-types"
		},
		{
			"include": "#builtin-exceptions"
		},
		{
			"include": "#special-variables"
		}
	],
	"repository": {
		"array": {
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "meta.bracket.erg"
						}
					},
					"end": "(\\])((?:\\.)?'*)",
					"endCaptures": {
						"1": {
							"name": "meta.bracket.erg"
						},
						"2": {
							"name": "keyword.operator.transpose.erg"
						}
					},
					"name": "meta.array.erg",
					"patterns": [
						{
							"match": "\\bfor\\b",
							"name": "keyword.control.erg"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"parentheses": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "meta.bracket.erg"
						}
					},
					"end": "(\\))((?:\\.)?'*)",
					"endCaptures": {
						"1": {
							"name": "meta.bracket.erg"
						},
						"2": {
							"name": "keyword.operator.transpose.erg"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"bracket": {
			"patterns": [
				{
					"match": "(?:\\(|\\)|\\[|\\]|\\{|\\}|,|;)(?!('|(?:\\.'))*\\.?')",
					"name": "meta.bracket.erg"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"include": "#comment_block"
				},
				{
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.erg"
						}
					},
					"end": "\\n",
					"name": "comment.line.number-sign.erg"
				}
			]
		},
		"comment_block": {
			"patterns": [
				{
					"begin": "#\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.erg"
						}
					},
					"end": "\\]#",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.erg"
						}
					},
					"name": "comment.block.number-sign-equals.erg",
					"patterns": [
						{
							"include": "#comment_block"
						}
					]
				}
			]
		},
		"interpolated": {
			"patterns": [
				{
					"begin": "\\\\\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.erg"
						}
					},
					"contentName": "source.erg",
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.erg"
						}
					},
					"name": "meta.embedded.line.erg",
					"patterns": [
						{
							"include": "#nest_curly_and_self"
						},
						{
							"include": "$self"
						}
					],
					"repository": {
						"nest_curly_and_self": {
							"patterns": [
								{
									"begin": "\\\\\\{",
									"captures": {
										"0": {
											"name": "punctuation.section.scope.erg"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#nest_curly_and_self"
										}
									]
								},
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.erg"
						}
					},
					"match": "(#@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.instance.erg"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.erg"
						}
					},
					"match": "(#@@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.class.erg"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.erg"
						}
					},
					"match": "(#\\$)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.global.erg"
				}
			]
		},
		"function_decl": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.name.function.erg"
						},
						"2": {
							"name": "support.type.erg"
						}
					},
					"match": "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?(?=\\([^#]*\\)(::[^\\s]+)?(\\s*\\bwhere\\b\\s+.+?)?\\s*?=(?![=>]))",
					"comment": "first group is function name\nSecond group is type parameters (e.g. {T<:Number, S})\nThen open parens\nThen a lookahead ensures that we are followed by:\n  - anything (function argumnets)\n  - 0 or more spaces\n  - Finally an equal sign\nNegative lookahead ensures we don't have another equal sign (not `==`)"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.erg"
						},
						"2": {
							"name": "keyword.operator.dots.erg"
						},
						"3": {
							"name": "entity.name.function.erg"
						},
						"4": {
							"name": "support.type.erg"
						}
					},
					"match": "\\b(function|macro)(?:\\s+(?:(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*(\\.))?((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?|\\s*)(?=\\()",
					"comment": "similar regex to previous, but with keyword not 1-line syntax"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"match": "((?<!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))(?:(?:\\b0(?:x|X)[0-9a-fA-F](?:_?[0-9a-fA-F])*)|(?:\\b0o[0-7](?:_?[0-7])*)|(?:\\b0b[0-1](?:_?[0-1])*)|(?:(?:\\b[0-9](?:_?[0-9])*\\.?(?!\\.)(?:[_0-9]*))|(?:\\b\\.[0-9](?:_?[0-9])*))(?:[efE][+-]?[0-9](?:_?[0-9])*)?(?:im\\b|Inf(?:16|32|64)?\\b|NaN(?:16|32|64)?\\b|π\\b|pi\\b|ℯ\\b)?|\\b[0-9]+|\\bInf(?:16|32|64)?\\b|\\bNaN(?:16|32|64)?\\b|\\bπ\\b|\\bpi\\b|\\bℯ\\b))('*)",
					"captures": {
						"1": {
							"name": "constant.numeric.erg"
						},
						"2": {
							"name": "keyword.operator.conjugate-number.erg"
						}
					}
				},
				{
					"match": "\\bARGS\\b|\\bC_NULL\\b|\\bDEPOT_PATH\\b|\\bENDIAN_BOM\\b|\\bENV\\b|\\bLOAD_PATH\\b|\\bPROGRAM_FILE\\b|\\bstdin\\b|\\bstdout\\b|\\bstderr\\b|\\bVERSION\\b|\\bdevnull\\b",
					"name": "constant.global.erg"
				},
				{
					"match": "\\bTrue\\b|\\bFalse\\b|\\bNone\\b|\\bNotImplemented\\b|\\bEllipsis\\b",
					"name": "constant.language.erg"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "(?:->|=>)",
					"name": "keyword.operator.arrow.erg"
				},
				{
					"match": "(?:::)",
					"name": "keyword.operator.private.erg"
				},
				{
					"match": "(?:\\.)",
					"name": "keyword.operator.public.erg"
				},
				{
					"match": "(?::=)",
					"name": "keyword.operator.update.erg"
				},
				{
					"match": "(?:<<|>>)",
					"name": "keyword.operator.shift.erg"
				},
				{
					"match": "(?:\\s*(::|>:|<:)\\s*((?:(?:Union)?\\([^)]*\\)|[[:alpha:]_$∇][[:word:]⁺-ₜ!′\\.]*(?:(?:{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})|(?:\".+?(?<!\\\\)\"))?)))(?:\\.\\.\\.)?",
					"captures": {
						"1": {
							"name": "keyword.operator.relation.types.erg"
						},
						"2": {
							"name": "support.type.erg"
						}
					}
				},
				{
					"match": "(?:===|∈|\\.∈|∉|\\.∉|∋|\\.∋|∌|\\.∌|≈|\\.≈|≉|\\.≉|≠|\\.≠|≡|\\.≡|≢|\\.≢|⊆|\\.⊆|⊇|\\.⊇|⊈|\\.⊈|⊉|\\.⊉|⊊|\\.⊊|⊋|\\.⊋|\\.==|!==|!=|\\.>=|\\.>|\\.<=|\\.<|\\.≤|\\.≥|==|\\.!=|\\.=|\\.!|<:|>:|:>|(?<!>)>=|(?<!<)<=|>|<|≥|≤)",
					"name": "keyword.operator.relation.erg"
				},
				{
					"match": "(?<=\\s)(?:\\?)(?=\\s)",
					"name": "keyword.operator.ternary.erg"
				},
				{
					"match": "(?<=\\s)(?:\\:)(?=\\s)",
					"name": "keyword.operator.ternary.erg"
				},
				{
					"match": "(?:\\|\\||&&|(?<!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))!)",
					"name": "keyword.operator.boolean.erg"
				},
				{
					"match": "(?<=[[:word:]⁺-ₜ!′∇\\)\\]\\}])(?::)",
					"name": "keyword.operator.range.erg"
				},
				{
					"match": "(?:\\|>)",
					"name": "keyword.operator.applies.erg"
				},
				{
					"match": "(?:\\||\\.\\||\\&|\\.\\&|~|\\.~|⊻|\\.⊻)",
					"name": "keyword.operator.bitwise.erg"
				},
				{
					"match": "(?:\\+\\+|\\+|\\.\\+|-|\\.\\-|\\*|\\.\\*|//(?!=)|\\.//(?!=)|/|\\./|%|\\.%)",
					"name": "keyword.operator.arithmetic.erg"
				},
				{
					"match": "(?: and | or | not )",
					"name": "keyword.operator.relation.erg"
				},
				{
					"match": "(?: cross | dot )",
					"name": "keyword.operator.vector.erg"
				},
				{
					"match": "(?: is | isnot | in | notin | as )",
					"name": "keyword.operator.other.erg"
				},
				{
					"match": "(?:\\.(?=(?:@|_|\\p{L}))|\\.\\.+)",
					"name": "keyword.operator.dots.erg"
				},
				{
					"captures": {
						"2": {
							"name": "keyword.operator.transposed-variable.erg"
						}
					},
					"match": "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(('|(\\.'))*\\.?')"
				},
				{
					"captures": {
						"1": {
							"name": "bracket.end.erg"
						},
						"2": {
							"name": "keyword.operator.transposed-matrix.erg"
						}
					},
					"match": "(\\])((?:'|(?:\\.'))*\\.?')"
				},
				{
					"captures": {
						"1": {
							"name": "bracket.end.erg"
						},
						"2": {
							"name": "keyword.operator.transposed-parens.erg"
						}
					},
					"match": "(\\))((?:'|(?:\\.'))*\\.?')"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "(rusteval!|rustexec!) *(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.procedural.builtin.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "(\"\"\")",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.rust.erg",
					"contentName": "meta.embedded.inline.rust",
					"patterns": [
						{
							"include": "source.rust"
						}
					]
				},
				{
					"begin": "(rusteval!|rustexec!) *(\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.procedural.builtin.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.rust.erg",
					"contentName": "meta.embedded.inline.rust",
					"patterns": [
						{
							"include": "source.rust"
						}
					]
				},
				{
					"begin": "(pyexec!|pyeval!) *(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.procedural.builtin.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "([\\s\\w]*)(\"\"\")",
					"endCaptures": {
						"2": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.python.erg",
					"contentName": "meta.embedded.inline.python",
					"patterns": [
						{
							"include": "source.python"
						}
					]
				},
				{
					"begin": "(pyexec!|pyeval!) *(\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.procedural.builtin.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.python.erg",
					"contentName": "meta.embedded.inline.python",
					"patterns": [
						{
							"include": "source.python"
						}
					]
				},
				{
					"begin": "\"\"\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.multiline.begin.erg"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.multiline.end.erg"
						}
					},
					"name": "string.quoted.triple.double.erg",
					"comment": "multi-line string with triple double quotes",
					"patterns": [
						{
							"include": "#interpolated"
						},
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "'''",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.multiline.begin.erg"
						}
					},
					"end": "'''",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.multiline.end.erg"
						}
					},
					"name": "string.quoted.triple.single.erg",
					"comment": "multi-line string with triple single quotes",
					"patterns": [
						{
							"include": "#interpolated"
						},
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "text.html.markdown"
						}
					]
				},
				{
					"name": "string.quoted.double.erg",
					"begin": "\"(?!\"\")",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"comment": "String with single pair of double quotes. Regex matches isolated double quote",
					"patterns": [
						{
							"include": "#interpolated"
						},
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"name": "string.quoted.single.erg",
					"begin": "'(?!'')",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"comment": "String with single pair of single quotes. Regex matches isolated single quote",
					"patterns": [
						{
							"include": "#interpolated"
						},
						{
							"include": "#string_escaped_char"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)",
					"name": "constant.character.escape.erg"
				}
			]
		},
		"symbol": {
			"patterns": [
				{
					"match": "(?<![[:word:]⁺-ₜ!′∇\\)\\]\\}]):(?:(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(?!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))(?![\"`])",
					"name": "constant.other.symbol.erg",
					"comment": "This is string.quoted.symbol.erg in tpoisot's package"
				}
			]
		},
		"raw-symbol": {
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.erg"
				}
			},
			"end": "'(?!')",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.erg"
				}
			},
			"name": "source.other.raw.erg",
			"patterns": []
		},
		"symbolized-operator": {
			"patterns": [
				{
					"begin": "(?<!`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?```",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						},
						"1": {
							"name": "support.function.macro.erg"
						}
					},
					"end": "(```)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "support.function.macro.erg"
						}
					},
					"name": "keyword.operator.backtick.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "(?<!`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						},
						"1": {
							"name": "support.function.macro.erg"
						}
					},
					"end": "(?<![^\\\\]\\\\)(`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "support.function.macro.erg"
						}
					},
					"name": "keyword.operator.backtick.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				}
			]
		},
		"special-variables-do": {
			"match": "(do!)",
			"captures": {
				"1": {
					"name": "variable.language.special.do.procedural.erg"
				}
			}
		},
		"procedural": {
			"patterns": [
				{
					"name": "support.function.procedural.builtin.erg",
					"match": "(dir!|for!|globals!|id!|if!|input!|locals!|open!|match!|print!|while!|with!)"
				},
				{
					"name": "constant.other.procedural.erg",
					"match": "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))",
					"captures": {
						"2": {
							"name": "entity.name.function.procedural.erg"
						},
						"3": {
							"name": "entity.name.type.procedural.erg"
						}
					}
				}
			]
		},
		"type_decl": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.name.type.erg"
						},
						"2": {
							"name": "entity.other.inherited-class.erg"
						},
						"3": {
							"name": "punctuation.separator.inheritance.erg"
						}
					},
					"match": "(?>!:_)(?:struct|mutable\\s+struct|abstract\\s+type|primitive\\s+type)\\s+((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(\\s*(<:)\\s*(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*(?:{.*})?)?",
					"name": "meta.type.erg"
				}
			]
		},
		"special-variables": {
			"match": "(?x)\n  \\b (?<!\\.) (?:\n (Self) | (self) | (cls) | (do)\n  )\\b\n",
			"captures": {
				"1": {
					"name": "variable.language.special.self.type.erg"
				},
				"2": {
					"name": "variable.language.special.self.erg"
				},
				"3": {
					"name": "variable.language.special.cls.erg"
				},
				"4": {
					"name": "variable.language.special.do.erg"
				}
			}
		},
		"builtin-exceptions": {
			"name": "support.type.exception.erg",
			"match": "(?x) (?<!\\.) \\b(\n  (\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\n    | BrokenPipe | ChildProcess\n    | (Connection (Aborted | Refused | Reset)?)\n    | EOF | Environment | FileExists | FileNotFound\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\n    | Timeout\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\n    | Reference | Runtime | Recursion | Syntax | System\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\n    | Value | Windows | ZeroDivision | ModuleNotFound\n  ) Error\n|\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\n    | Unicode | Bytes | Resource\n  )? Warning\n|\n  SystemExit | Stop(Async)?Iteration\n  | KeyboardInterrupt\n  | GeneratorExit | (Base)?Exception\n)\\b\n"
		},
		"builtin-functions": {
			"patterns": [
				{
					"name": "support.function.builtin.erg",
					"match": "(?x)\n  (?<!\\.) \\b(\n    __import__ | abs | all | any | ascii | assert | bin | breakpoint | callable\n    | chr | compile | copyright | credits | delattr | dir | discard | divmod\n    | enumerate | eval | exec | exit | filter | format | getattr\n    | globals | hasattr | hash | help | hex | if | import\n    | isinstance | issubclass | iter | len | license | locals | log | map\n   | match | max | memoryview | min | next | not | oct | open | ord | pow | pyimport\n    | quit | range | reload | repr | reversed | round\n    | setattr | sorted | sum | vars | zip | Class | Del | Trait | Inheritable | Inherit | Patch | Structural | Subsume\n  )\\b\n"
				},
				{
					"name": "variable.legacy.builtin.erg",
					"match": "(?x)\n  (?<!\\.) \\b(\n    file | reduce | intern | raw_input | unicode | cmp | basestring\n    | execfile | long | xrange\n  )\\b\n"
				}
			]
		},
		"builtin-types": {
			"name": "support.type.erg",
			"match": "(?x)\n  (?<!\\.) \\b(\n   Array | Bool | ByteArray | Bytes | ClassType | ClassMethod | Complex | Dict\n    | Float | FrozenSet | Int | Nat | Never | NoneType | Object | Property | Ratio\n    | Set | Slice | StaticMethod | Str | Tuple | TraitType | Type\n\n    (?# Although 'super' is not a type, it's related to types,\n        and is special enough to be highlighted differently from\n        other built-ins)\n    | super\n  )\\b\n"
		}
	},
	"scopeName": "source.erg"
}
